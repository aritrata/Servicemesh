tenantId="72f988bf-86f1-41af-91ab-2d7cd011db47"
subscriptionId="6bdcc705-8db6-4029-953a-e749070e6db6"
primaryResourceGroup="istio-workshop-rg"
primaryClusterName="istio-mesh-cluster"
secondaryResourceGroup="linkerd-workshop-rg"
secondaryClusterName="linkerd-mesh-cluster"
objectId="890c52c5-d318-4185-a548-e07827190ff6"
helmPath="/Users/monojitdattams/Development/Projects/Workshops/AKSWorkshop/ServiceMeshWorkshop/AKS/Helm"
istioPath="/Users/monojitdattams/Development/Projects/Workshops/AKSWorkshop/ServiceMeshWorkshop/Istio"

Connect to Public Cluster
===========================

https://istio.io/latest/docs/setup/getting-started/

curl -L https://istio.io/downloadIstio | sh -
#curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.6.8 TARGET_ARCH=x86_64 sh -

az login --tenant $tenantId
az aks get-credentials -g $primaryResourceGroup -n $primaryClusterName
az aks get-credentials -g $secondaryResourceGroup -n $secondaryClusterName

export CTX_CLUSTER1=west
export CTX_CLUSTER2=east

k get no --context=$CTX_CLUSTER1
k get ns --context=$CTX_CLUSTER1
k create namespace istio-system --context $CTX_CLUSTER1
k create namespace primary --context $CTX_CLUSTER1
istioctl install --context=$CTX_CLUSTER1 --set profile=default -y
k label namespace primary istio-injection=enabled --context=$CTX_CLUSTER1

k get no --context=$CTX_CLUSTER2
k get ns --context=$CTX_CLUSTER2
k create namespace istio-system --context $CTX_CLUSTER2
k create namespace secondary --context $CTX_CLUSTER2
istioctl install --context=$CTX_CLUSTER2 --set profile=default -y
k label namespace secondary istio-injection=enabled --context=$CTX_CLUSTER2

k config use-context $CTX_CLUSTER1

k apply -f $istioPath/Components/samples/addons
k rollout status deployment/kiali -n istio-system
istioctl dashboard kiali&

k apply -f $istioPath/Examples/BookInfo/bookinfo.yaml -n primary

k get svc -n primary
k get pods -n primary

podName=$(k get pod -l app=ratings -n primary -o jsonpath='{.items[0].metadata.name}')
k exec $podName -n primary -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"

k apply -f $istioPath/Examples/BookInfo/bookinfo-gateway.yaml -n primary

RatingsApi
=============

k create ns db --context=$CTX_CLUSTER1
k label namespace db istio-injection=enabled --context=$CTX_CLUSTER1

helm repo add bitnami https://charts.bitnami.com/bitnami
helm search repo bitnami

helm install ratingsdb bitnami/mongodb -n db \
--set auth.username=ratingsuser,auth.password=ratingspwd,auth.database=ratingsdb \
--set controller.nodeSelector.agentpool=agentpool \
--set controller.defaultBackend.nodeSelector.agentpool=agentpool

helm upgrade ratingsdb bitnami/mongodb -n db \
--set podLabels.app=ratingsdb-pod --set podLabels.version=v1

k create ns aks-workshop-dev --context=$CTX_CLUSTER1
k label namespace aks-workshop-dev istio-injection=enabled --context=$CTX_CLUSTER1

k create secret generic aks-workshop-mongo-secret -n aks-workshop-dev \
    --from-literal=MONGOCONNECTION="mongodb://ratingsuser:ratingspwd@ratingsdb-mongodb.db:27017/ratingsdb"

#k delete secrets/aks-workshop-mongo-secret -n aks-workshop-dev

helm install ratingsapi-chart -n aks-workshop-dev $helmPath/ratingsapi-chart/ -f $helmPath/ratingsapi-chart/values-dev.yaml
helm upgrade ratingsapi-chart -n aks-workshop-dev $helmPath/ratingsapi-chart/ -f $helmPath/ratingsapi-chart/values-dev.yaml
helm uninstall ratingsapi-chart -n aks-workshop-dev

RatingsWeb
=============

helm install ratingsweb-chart -n aks-workshop-dev $helmPath/ratingsweb-chart/ -f $helmPath/ratingsweb-chart/values-dev.yaml
helm upgrade ratingsweb-chart -n aks-workshop-dev $helmPath/ratingsweb-chart/ -f $helmPath/ratingsweb-chart/values-dev.yaml
helm uninstall ratingsweb-chart -n aks-workshop-dev

==================================================================


#helm uninstall ratingsdb -n db

istioctl analyze

#for ((i=1;i<=100;i++)); do   curl -k "http://20.62.219.214/nginx"; done

k get svc istio-ingressgateway -n istio-system
export INGRESS_HOST=$(k -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
export INGRESS_PORT=$(k -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
export SECURE_INGRESS_PORT=$(k -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')

export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT
echo "$GATEWAY_URL"
echo "http://$GATEWAY_URL/product"

k apply -f $istioPath/Examples/HelloWorld/helloworld-app.yaml -n primary --context=$CTX_CLUSTER1
#k delete -f $istioPath/Examples/HelloWorld/helloworld-app.yaml -n primary --context=$CTX_CLUSTER1
k get po -n primary --context=$CTX_CLUSTER1

k apply -f $istioPath/Examples/Gateways/helloworld-serviceentry.yaml -n primary --context=$CTX_CLUSTER1
k apply -f $istioPath/Examples/Gateways/primary-gateway.yaml -n primary --context=$CTX_CLUSTER1
k apply -f $istioPath/Examples/Gateways/helloworld-destination-rule.yaml -n primary --context=$CTX_CLUSTER1

k get svc -n primary --context=$CTX_CLUSTER1
k describe svc -n primary --context=$CTX_CLUSTER1
k get svc -A --context=$CTX_CLUSTER1

curl http://$GATEWAY_URL/hello
k logs <helloworld-v1> -n primary --context=$CTX_CLUSTER1

k config use-context $CTX_CLUSTER2
k get svc istio-ingressgateway -n istio-system
export INGRESS_HOST=$(k -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
export INGRESS_PORT=$(k -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
export SECURE_INGRESS_PORT=$(k -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')

export GATEWAY_URL2=$INGRESS_HOST:$INGRESS_PORT
echo "$GATEWAY_URL2"

k apply -f $istioPath/Examples/HelloWorld/helloworld-app-v2.yaml -n secondary --context=$CTX_CLUSTER2
k get po -n secondary --context=$CTX_CLUSTER2

k apply -f $istioPath/Examples/Gateways/helloworld-v2-gateway.yaml -n secondary --context=$CTX_CLUSTER2
k apply -f $istioPath/Examples/Gateways/helloworld-v2-destination-rule.yaml -n secondary --context=$CTX_CLUSTER2

k get svc -n secondary --context=$CTX_CLUSTER2
k describe svc -n secondary --context=$CTX_CLUSTER2
k get svc -A --context=$CTX_CLUSTER2

#istioctl x uninstall --set profile=default --purge --context=$CTX_CLUSTER1
#istioctl x uninstall --set profile=default --purge --context=$CTX_CLUSTER2
#k delete namespace istio-system

kubectl apply --context="${CTX_CLUSTER2}" \
    -f samples/sleep/sleep.yaml -n sample
kubectl get pod --context="${CTX_CLUSTER2}" -n secondary -l app=sleep

for ((i=1;i<=100;i++)); do \
kubectl exec --context="${CTX_CLUSTER2}" -n sample -c sleep \
    "$(kubectl get pod --context="${CTX_CLUSTER2}" -n sample -l \
    app=sleep -o jsonpath='{.items[0].metadata.name}')" \
    -- curl -sS helloworld.sample:5000/hello;done


APIM gateway
=============

k create secret generic aks-workshop-apim-gateway-token -n aks-workshop-dev --from-literal=value="GatewayKey aks-workshop-apim-gateway&202107051532&1CfKtrJgWNXhHtoRaftMjs7MXIacyDPT6J8KIk1wSPSq8suERa0t6zi70mhav46yqUSXE3MbpsP4sEPnubeKAQ=="  --type=Opaque
k apply -f aks-workshop-apim-gateway.yaml

k delete secrets/aks-workshop-apim-gateway-token -n aks-workshop-dev
k delete -f aks-workshop-apim-gateway.yaml

OAuth2
=======
190f0a63-3460-4f1a-ba65-14adba3adb04
9ebedfa6-518c-4e7a-b2cf-dcaa056d2cfc
3851f269-b22b-4de6-97d6-aa9fe60fe301
api://190f0a63-3460-4f1a-ba65-14adba3adb04

b9cfc0ea-37f3-4314-86cd-fda8f6eff4df
86d4be8c-5cf0-484b-bdea-9e5c365f631e
3851f269-b22b-4de6-97d6-aa9fe60fe301
aksclientappsecret: zbFsv9.PNN-HjL-qu-qMz~p3f6AP.V7I9z

https://hybrid-workshop-apim.developer.azure-api.net/signin-oauth/code/callback/aksapioauth2
https://hybrid-workshop-apim.developer.azure-api.net/signin-oauth/implicit/callback

<validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <openid-config url="https://login.microsoftonline.com/3851f269-b22b-4de6-97d6-aa9fe60fe301/.well-known/openid-configuration" />
    <required-claims>
        <claim name="aud">
            <value>190f0a63-3460-4f1a-ba65-14adba3adb04</value>
        </claim>
    </required-claims>
</validate-jwt>